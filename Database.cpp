#include "DRT.h"
#include "B.h"
#include "BTreeNode.h"
#include <time.h> 
#include <algorithm>
#include "StudentDatabase.h"
#include <string.h>
//Serves as the interface between the BTree/Database and the user.

//Testing Functions
char random_char(){
	//string pool = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";
	string pool = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
	return pool[rand()%pool.length()];
}

vector<string> generate_unique_random_strings(int length, int size){
	vector<string> v(length, "");
	for(int i = 0; i < length;){
		string str = "";
		for(int j = 0; j < size; j++){
			str += random_char();
		}
		if(!(find(v.begin(), v.end(), str) != v.end())){
			v[i] = str;
			i++;
		}
	}
	return v;
}


vector<string> generate_random_strings(int length, int size){
	vector<string> v(length, "");
	for(int i = 0; i < length; i++){
		string str = "";
		for(int j = 0; j < size; j++){
			str += random_char();
		}
		v[i] = str;
	}
	return v;
}

void print_string_vector(vector<string> strs){
	for(int i = 0; i < strs.size(); i++){
		cout << strs[i] << " ";
	}
	cout << endl;
}

/*
Three Tables:
	Student Table:
		- ID (Generated by the database)
		- Name (20 bytes)
		- Last Name (30 bytes)
		
	Class Table:
		- ID (Generated by the database)
		- Class Name (50 bytes)
		
	Class Assignment Table:
		- ID (Generated by the database)
		- Grade (2 bytes)

IDS:
	Student ID = 4 bytes of extended first_name, 4 bytes of exented last_name. 
	If it already exists, 5 bytes of first, 3 bytes of seccond ...
	
	Class ID = 10 bytes of extended name (Starting at 0). If it already exists, 10 bytes starting at 1 ... 
	
	Assignment ID = Class ID + Student ID
*/




int main(){
	StudentDatabase* db = new StudentDatabase("student_file.txt", "class_file.txt", "assignment_file.txt");
	db->ui("INITIALIZE");
	db->ui("ADD Students " + db->studentNameToID("Steve", "Smith") +  " Steve Smith");
	db->ui("ADD Students " + db->studentNameToID("Steve", "Smith") +  " Steve Smith");
	db->ui("ADD Students " + db->studentNameToID("Steve", "Smith") +  " Steve Smith");
	db->ui("ADD Students " + db->studentNameToID("Steve", "Smith") +  " Steve Smith");
	
	string student_id_1 = "StevSmit";
	string student_id_2 = "SteveSmi";
	string student_id_3 = "StevSmit";
	string student_id_4 = "SteveS..";
	
	cout << db->ui("OUT Students") << endl;

	db->ui("ADD Classes " + db->classNameToID("Math") + " Math");
	db->ui("ADD Classes " + db->classNameToID("Math") + " Math");
	db->ui("ADD Classes " + db->classNameToID("Math") + " Math");
	db->ui("ADD Classes " + db->classNameToID("Math") + " Math");
	db->ui("ADD Classes " + db->classNameToID("Math") + " Math");

	string class_id_1 = "....Math..";
	string class_id_2 = "Math......";
	string class_id_3 = "ath.M.....";
	string class_id_4 = "h...Mat...";
	string class_id_5 = "th..Ma....";


	cout << db->ui("OUT Classes") << endl;

	db->ui("MODIFY Students " + student_id_1 + " Jeff Smith");
	db->ui("MODIFY Students " + student_id_2 + " Bill Fisher");
	db->ui("MODIFY Students " + student_id_3 + " John Doe");
	db->ui("MODIFY Students " + student_id_4 + " Dough Crane");
	
	cout << db->ui("OUT Students") << endl;
	
	db->ui("REMOVE Students Steve.Sm");
	
	cout << db->ui("OUT Students") << endl;
	
	db->ui("REMOVE Students SteveSmi");

	cout << db->ui("OUT Students") << endl;
	
	db->ui("MODIFY Classes " + class_id_1 + " Calculus");
	db->ui("MODIFY Classes " + class_id_2 + " Trigonometry");
	db->ui("MODIFY Classes " + class_id_3 + " Algebra");
	db->ui("MODIFY Classes " + class_id_4 + " Topology");

	cout << db->ui("OUT Classes") << endl;
	
	db->ui("ADD ClassAssignments " + db->classAssignmentToID(class_id_1, student_id_1) + " B");
	db->ui("ADD ClassAssignments " + db->classAssignmentToID(class_id_4, student_id_2) + " C");
	db->ui("ADD ClassAssignments " + db->classAssignmentToID(class_id_2, student_id_3) + " A");
	db->ui("ADD ClassAssignments " + db->classAssignmentToID(class_id_5, student_id_4) + " D");
	db->ui("ADD ClassAssignments " + db->classAssignmentToID(class_id_4, student_id_1) + " E");
	db->ui("ADD ClassAssignments " + db->classAssignmentToID(class_id_2, student_id_2) + " A");
	db->ui("ADD ClassAssignments " + db->classAssignmentToID(class_id_1, student_id_2) + " A");
	db->ui("ADD ClassAssignments " + db->classAssignmentToID(class_id_3, student_id_2) + " A");
	db->ui("ADD ClassAssignments " + db->classAssignmentToID(class_id_4, student_id_3) + " A");

	cout << db->ui("OUT ClassAssignments") << endl;
	
	db->ui("MODIFY ClassAssignments " + db->classAssignmentToID(class_id_5, student_id_4) + " A+");
	db->ui("MODIFY ClassAssignments " + db->classAssignmentToID(class_id_4, student_id_1) + " D+");
	db->ui("MODIFY ClassAssignments " + db->classAssignmentToID(class_id_2, student_id_2) + " F-");

	cout << db->ui("OUT ClassAssignments") << endl;

	db->ui("REMOVE ClassAssignments " + db->classAssignmentToID(class_id_5, student_id_4));
	db->ui("REMOVE ClassAssignments " + db->classAssignmentToID(class_id_4, student_id_1));
	db->ui("REMOVE ClassAssignments " + db->classAssignmentToID(class_id_2, student_id_2));
	
	cout << db->ui("OUT ClassAssignments") << endl;

	
	cout << "DONE" << endl;
	return -1;
}